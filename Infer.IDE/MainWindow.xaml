<Window x:Class="Infer.IDE.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:graphsharp="clr-namespace:GraphSharp.Controls;assembly=GraphSharp.Controls"
        xmlns:local="clr-namespace:Infer.IDE"
        xmlns:graph="clr-namespace:Backend;assembly=Backend"
        xmlns:zoom="clr-namespace:WPFExtensions.Controls;assembly=WPFExtensions"
        xmlns:WPFExtensions_AttachedBehaviours="clr-namespace:WPFExtensions.AttachedBehaviours;assembly=WPFExtensions"
        xmlns:Converters="clr-namespace:GraphSharp.Converters;assembly=GraphSharp.Controls"
        Title="Infer.IDE" Height="600" Width="1100" WindowState="Maximized">

    <Window.Resources>
        <ResourceDictionary>
            <local:FadeIn x:Key="fastFadeInTransition" />
            <local:FadeOut x:Key="fastFadeOutTransition" />

            <LinearGradientBrush x:Key="NormalBrush" EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="#EEE" Offset="0.0"/>
                <GradientStop Color="#CCC" Offset="1.0"/>
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="EnteredBrush" EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="#BBB" Offset="0.0"/>
                <GradientStop Color="#EEE" Offset="0.1"/>
                <GradientStop Color="#EEE" Offset="0.9"/>
                <GradientStop Color="#FFF" Offset="1.0"/>
            </LinearGradientBrush>
            <SolidColorBrush x:Key="LeaveBrush" Color="#444"/>
            <LinearGradientBrush x:Key="MouseOverBrush" EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="DarkCyan" Offset="0.0"/>
                <GradientStop Color="Cyan" Offset="1.0"/>
            </LinearGradientBrush>


            <DataTemplate x:Key="NodeTemplate" DataType="{x:Type graph:ModelVertex}">
                <!--<Border x:Name="Border"
                        BorderBrush="{Binding Path=BorderBrush, Mode=OneWay}"
                        Background="Transparent"
						BorderThickness="2.0"
						CornerRadius="20,20,20,20" Padding="5">-->

                <TextBlock ToolTip="{Binding Path=Distribution, Mode=OneWay}" 
                           Text="{Binding Path=Label, Mode=OneWay}" 
                           MouseEnter="TextBlock_MouseEnter" 
                           MouseLeave="TextBlock_MouseLeave" />

                <!--<Border.Effect>
                        <DropShadowEffect BlurRadius="2" Color="LightGray" 
                        Opacity="0.3" Direction="315"/>
                    </Border.Effect>

                </Border>-->
            </DataTemplate>

            <!--Green: FF1DBA00
                Red: FFD01908
                Yellow: FFD6A51C
            -->
            <!--<SolidColorBrush x:Key="HighlightedVertexBorderBrush" Color="{DynamicResource {x:Static SystemColors.HighlightColorKey}}" />-->
            <SolidColorBrush x:Key="HighlightedVertexBorderBrush" Color="#FF418CF0" />
            <SolidColorBrush x:Key="HighlightedVertexBackgroundBrush" Color="Transparent"  />
            <SolidColorBrush x:Key="HighlightedVertexForegroundBrush" Color="Black"/>
            <SolidColorBrush x:Key="SemiHighlightedSourceVertexBorderBrush" Color="Transparent" />
            <SolidColorBrush x:Key="SemiHighlightedSourceVertexBackgroundBrush" Color="Transparent" />
            <SolidColorBrush x:Key="SemiHighlightedTargetVertexBorderBrush" Color="Transparent" />
            <SolidColorBrush x:Key="SemiHighlightedTargetVertexBackgroundBrush" Color="Transparent" />
            <SolidColorBrush x:Key="HighlightedEdgeBrush" Color="#FF418CF0" />
            <SolidColorBrush x:Key="SemiHighlightedInEdgeBrush" Color="#FFD01908" />
            <SolidColorBrush x:Key="SemiHighlightedOutEdgeBrush" Color="#FF1DBA00" />

            <Style x:Key="Border" TargetType="{x:Type Border}">
                <Setter Property="CornerRadius" Value="20"/>

                <Style.Triggers>
                    <DataTrigger Binding="{Binding Type}" Value="ArrayVariable">
                        <Setter Property="CornerRadius" Value="0"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Type}" Value="IntermediateArrayVariable">
                        <Setter Property="CornerRadius" Value="0"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Type}" Value="ObservedArrayVariable">
                        <Setter Property="CornerRadius" Value="0"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>


            <!-- VERTEX CONTROL -->
            <Style TargetType="{x:Type graphsharp:VertexControl}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type graphsharp:VertexControl}">
                            <Border Background="{TemplateBinding Background}" 
							        BorderBrush="{TemplateBinding BorderBrush}" 
							        BorderThickness="{TemplateBinding BorderThickness}"
							        Style="{StaticResource Border}"
							        Padding="5">
                                <ContentControl Content="{TemplateBinding Vertex}"
                                            ContentTemplate="{StaticResource NodeTemplate}"  />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="graphsharp:GraphElementBehaviour.HighlightTrigger" Value="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="WPFExtensions_AttachedBehaviours:DragBehaviour.IsDragEnabled" Value="True"/>
                <Setter Property="WPFExtensions_AttachedBehaviours:DragBehaviour.X" Value="{Binding Path=(graphsharp:GraphCanvas.X), Mode=TwoWay, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="WPFExtensions_AttachedBehaviours:DragBehaviour.Y" Value="{Binding Path=(graphsharp:GraphCanvas.Y), Mode=TwoWay, RelativeSource={RelativeSource Self}}"/>
                <!--Idle-->
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="Black"/>
                <Setter Property="BorderThickness" Value="3,1,3,1"/>
                <Setter Property="Padding" Value="5"/>
                <Setter Property="BorderBrush" Value="Transparent"/>

                <Style.Triggers>
                    <DataTrigger Binding="{Binding Type}" Value="ArrayVariable">
                        <Setter Property="BorderBrush" Value="#FFAAC7EC"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Type}" Value="IntermediateArrayVariable">
                        <Setter Property="BorderBrush" Value="#FFC5D4E6"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Type}" Value="ObservedArrayVariable">
                        <Setter Property="BorderBrush" Value="Transparent"/>
                        <Setter Property="Background" Value="#FFACCFFA"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Type}" Value="IntermediateVariable">
                        <Setter Property="Foreground" Value="DarkGray"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Type}" Value="IntermediateArrayVariable">
                        <Setter Property="Foreground" Value="DarkGray"/>
                    </DataTrigger>

                    <!--Mouse Over-->
                    <Trigger Property="graphsharp:GraphElementBehaviour.IsHighlighted" Value="True">
                        <Setter Property="BorderBrush" Value="{StaticResource HighlightedVertexBorderBrush}"/>
                        <Setter Property="Background" Value="{StaticResource HighlightedVertexBackgroundBrush}"/>
                    </Trigger>
                    <!--Mouse Over A Neighbour-->
                    <Trigger Property="graphsharp:GraphElementBehaviour.IsSemiHighlighted" Value="True">
                        <Setter Property="BorderBrush" Value="{StaticResource HighlightedVertexBorderBrush}"/>
                        <Setter Property="Background" Value="{StaticResource HighlightedVertexBackgroundBrush}"/>
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="graphsharp:GraphElementBehaviour.IsSemiHighlighted" Value="True"/>
                            <Condition Property="graphsharp:GraphElementBehaviour.SemiHighlightInfo" Value="Source"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="BorderBrush" Value="{StaticResource SemiHighlightedSourceVertexBorderBrush}"/>
                        <Setter Property="Background" Value="{StaticResource SemiHighlightedSourceVertexBackgroundBrush}"/>
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="graphsharp:GraphElementBehaviour.IsSemiHighlighted" Value="True"/>
                            <Condition Property="graphsharp:GraphElementBehaviour.SemiHighlightInfo" Value="Target"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="BorderBrush" Value="{StaticResource SemiHighlightedTargetVertexBorderBrush}"/>
                        <Setter Property="Background" Value="{StaticResource SemiHighlightedTargetVertexBackgroundBrush}"/>
                    </MultiTrigger>
                </Style.Triggers>
            </Style>

            <Converters:EdgeRouteToPathConverter x:Key="routeToPathConverter" />

            <!-- EDGE CONTROL -->
            <Style TargetType="{x:Type graphsharp:EdgeControl}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type graphsharp:EdgeControl}">
                            <Path Stroke="{TemplateBinding Foreground}"
                          StrokeThickness="{TemplateBinding StrokeThickness}"
                          MinWidth="1"
                          MinHeight="1"
                          ToolTip="{TemplateBinding ToolTip}"
                          x:Name="edgePath">
                                <Path.Data>
                                    <PathGeometry>
                                        <PathGeometry.Figures>
                                            <MultiBinding Converter="{StaticResource routeToPathConverter}">
                                                <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                                 Path="Source.(graphsharp:GraphCanvas.X)" />
                                                <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                                 Path="Source.(graphsharp:GraphCanvas.Y)" />
                                                <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                                 Path="Source.ActualWidth" />
                                                <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                                 Path="Source.ActualHeight" />
                                                <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                                 Path="Target.(graphsharp:GraphCanvas.X)" />
                                                <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                                 Path="Target.(graphsharp:GraphCanvas.Y)" />
                                                <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                                 Path="Target.ActualWidth" />
                                                <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                                 Path="Target.ActualHeight" />
                                                <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                                 Path="RoutePoints" />
                                            </MultiBinding>
                                        </PathGeometry.Figures>
                                    </PathGeometry>
                                </Path.Data>
                            </Path>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="graphsharp:GraphElementBehaviour.HighlightTrigger"
                Value="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" />
                <Setter Property="MinWidth"
                Value="1" />
                <Setter Property="MinHeight"
                Value="1" />
                <Setter Property="Background"
                Value="Red" />
                <Setter Property="Foreground"
                Value="Silver" />
                <Setter Property="Opacity"
                Value="0.5" />
                <Style.Triggers>
                    <Trigger Property="graphsharp:GraphElementBehaviour.IsHighlighted"
                     Value="True">
                        <Setter Property="Foreground"
                        Value="{DynamicResource HighlightedEdgeBrush}" />
                    </Trigger>
                    <Trigger Property="graphsharp:GraphElementBehaviour.IsSemiHighlighted"
                     Value="True">
                        <Setter Property="Foreground"
                        Value="{DynamicResource HighlightedEdgeBrush}" />
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="graphsharp:GraphElementBehaviour.IsSemiHighlighted"
                               Value="True" />
                            <Condition Property="graphsharp:GraphElementBehaviour.SemiHighlightInfo"
                               Value="InEdge" />
                        </MultiTrigger.Conditions>
                        <Setter Property="Foreground"
                        Value="{DynamicResource SemiHighlightedInEdgeBrush}" />
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="graphsharp:GraphElementBehaviour.IsSemiHighlighted"
                               Value="True" />
                            <Condition Property="graphsharp:GraphElementBehaviour.SemiHighlightInfo"
                               Value="OutEdge" />
                        </MultiTrigger.Conditions>
                        <Setter Property="Foreground"
                        Value="{DynamicResource SemiHighlightedOutEdgeBrush}" />
                    </MultiTrigger>
                </Style.Triggers>
            </Style>

        </ResourceDictionary>
    </Window.Resources>



    <Grid Margin="2,2,2,2">
        <Grid.RowDefinitions>
            <RowDefinition Height="20"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <StackPanel x:Name="InitialPanel" Grid.Row="1" Background="LightGray" Panel.ZIndex="1" Visibility="Hidden" >
            <TextBox x:Name="uID" Height="30" Width="120" Text="UserID" TextWrapping="Wrap" Margin="50,280,500,0"/>
            <TextBox x:Name="gID" Height="30" Width="120" Text="GroupID" TextWrapping="Wrap" Margin="50,10,500,0"/>

            <Button Height="30" Width="200" Margin="130,50,500,0" Click="Initial_Click" Content="Start" />

        </StackPanel>

        <StackPanel x:Name="IntermediatePanel" Grid.Row="1" Background="LightGray" Panel.ZIndex="1" Visibility="Hidden" >
            <Label x:Name="ExererciseLabel" Content="Exercise 1" HorizontalAlignment="Center" FontSize="30" Margin="0,280,0,10"/>
            <Label x:Name="InfoLabel" Content="Please read the instructions in the workbook carefully." 
                   HorizontalAlignment="Center" Margin="0,0,0,50"/>
            <Button Width="200" Height="39" Content="Start" FontSize="15" Click="Start_Click"/>
        </StackPanel>

        <DockPanel Grid.Row="0" Panel.ZIndex="-1" >
            <Menu DockPanel.Dock="Top">
                <MenuItem Header="_File">
                    <MenuItem Header="_New" Click="New_Click"/>
                    <MenuItem Header="_Open" Click="Open_Click"/>
                    <MenuItem Header="_Save" Click="Save_Click"/>
                    <Separator />
                    <MenuItem Header="_Exit" Click="Exit_Click"/>
                </MenuItem>
            </Menu>
            <TextBox AcceptsReturn="True" />
        </DockPanel>

        <Grid Grid.Row= "1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition x:Name="ChartsColumn" Width="190"/>
            </Grid.ColumnDefinitions>

            <Grid Grid.Column="0">
                <Grid.RowDefinitions>
                    <RowDefinition Name="VisRow" Height="*" />
                    <RowDefinition Height="35"/>
                    <RowDefinition Height="95"/>
                </Grid.RowDefinitions>

                <Grid Grid.Row="0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition x:Name="TextColumn" Width="500" />
                        <ColumnDefinition x:Name="GraphColumn" Width="*" />
                    </Grid.ColumnDefinitions>


                    <avalonEdit:TextEditor Grid.Column="0"
                        xmlns:avalonEdit="http://icsharpcode.net/sharpdevelop/avalonedit"
                        Name="WriteBox" 
                        FontFamily="Consolas" FontSize="14"
                        ShowLineNumbers="True"    
                        LineNumbersForeground="LightGray"
                        TextChanged="OnTextChanged" 
                        KeyUp="WriteBox_KeyUp" 
                        HorizontalScrollBarVisibility="Hidden"  
                        VerticalScrollBarVisibility="Visible"
                        >
                    </avalonEdit:TextEditor>

                    <Rectangle Name="Cover" Grid.Column="1" Fill="Gray" HorizontalAlignment="Stretch" 
                               VerticalAlignment="Stretch" 
                               Opacity="0.5" Panel.ZIndex="1"                           
                               />

                    <Label x:Name="FurtherInfo" Grid.Column="1" FontSize="14" 
                           Content="Hover over nodes for marginal distributions" 
                           Margin="5" Visibility="Collapsed"/>

                    <!--<zoom:ZoomControl Grid.Column="1" Zoom="0.1">-->
                    <local:ModelGraphLayout Grid.Column ="1" x:Name="graphLayout" Margin="10"
                            Graph="{Binding Graph}"
                            LayoutAlgorithmType="EfficientSugiyama"
                            HighlightAlgorithmType="Simple" 
                            CreationTransition="{x:Null}"
                            DestructionTransition="{DynamicResource fastFadeOutTransition}"
                            IsAnimationEnabled="True" AnimationLength="0:0:0.1"                     
                            AsyncCompute="True"
                            IsEnabled="{Binding GraphEnabled}"
                            OverlapRemovalAlgorithmType="FSA" />
                    <!--</zoom:ZoomControl> -->

                    <GridSplitter Grid.Column="1" HorizontalAlignment="Left" Height="{Binding VisRow.Heigt}" Margin="0,0,0,-0.2" VerticalAlignment="Stretch" Width="5"/>
                    <StackPanel HorizontalAlignment="Left" Height="463" Margin="0,-23,-196,-98.4" VerticalAlignment="Top" Width="996" Grid.ColumnSpan="2"/>

                    <!--AsyncCompute makes relayout faster and less buggy-->
                    <!--</zoom:ZoomControl> -->

                </Grid>

                <Grid Grid.Row="1" Background="#FFF1EDED">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="500"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    
                    <StatusBar Name="Status" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                               Background="#FFF1EDED" Grid.Column="1">

                        <StatusBarItem Margin="60,0,0,0">
                            <TextBlock Width="100" Name="StatusString"/>
                        </StatusBarItem>

                        <StatusBarItem HorizontalAlignment="Right" Margin="0,0,20,0" Width="230">
                            <ProgressBar Name = "ProgressBar" Value="0" Width="200" Height="16"   
                                         HorizontalAlignment="Right" Margin="15,0,0,0"
                                         Background="#FFF1EDED" BorderBrush="Transparent"
                                         ValueChanged="ProgressBar_ValueChanged" />
                        </StatusBarItem>
                    </StatusBar>

                    <Button Content="Finish" Background="LightGray" Grid.Column="0"
                            HorizontalAlignment="Center" VerticalAlignment="Center" 
                            Width="183" Height="30"
                            Click="Finish_Click"/>


                </Grid>

                <TextBox x:Name="ReadBox" Grid.Row="2" IsReadOnly="True" TextWrapping="Wrap" FontSize="14"/>
            </Grid>

            <ScrollViewer x:Name="Scroll"  Grid.Column="1" Grid.Row="1" >
                <StackPanel Orientation="Vertical" x:Name="Charts"/>
            </ScrollViewer>
        </Grid>
    </Grid>
</Window>
